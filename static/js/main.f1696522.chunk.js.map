{"version":3,"sources":["components/MainNav.js","components/Header.js","components/About.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["MainNav","react_default","a","createElement","className","href","Header","_ref","isAuthenticated","onLogout","components_MainNav","About","id","class","Content","components_About","App","Fragment","components_Header","components_Content","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiBeA,EAfC,kBACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,UAAR,aAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iBAAR,iBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,WAAR,cCAOC,EARA,SAAAC,KAAGC,gBAAHD,EAAoBE,SAApB,OACbR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEhBH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACO,EAAD,QC+CWC,EAtDD,kBACZV,EAAAC,EAAAC,cAAA,WAASS,GAAG,QAAQR,UAAU,SAC5BH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,iKAMFF,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,+dAUFF,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,sBACWF,EAAAC,EAAAC,cAAA,QAAMU,MAAM,SAAZ,WAEXZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uDAGJF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,+FCzCSW,EALC,kBACdb,EAAAC,EAAAC,cAAA,WAASC,UAAU,eACjBH,EAAAC,EAAAC,cAACY,EAAD,QCYWC,0LATX,OACEf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cALUC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f1696522.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MainNav = () => (\n  <nav className=\"app-main-nav\">\n    <ul>\n      <li>\n        <a href=\"#about\">About Me</a>\n      </li>\n      <li>\n        <a href=\"#case-studies\">Case Studies</a>\n      </li>\n      <li>\n        <a href=\"#resume\">Resume</a>\n      </li>\n    </ul>\n  </nav>\n);\nexport default MainNav;\n","import React from \"react\";\nimport MainNav from \"./MainNav\";\n// import logo from \"../images/logo.svg\";\n\nconst Header = ({ isAuthenticated, onLogout }) => (\n  <header className=\"app-header\">\n    {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n    <h1>Joeleen Kennedy</h1>\n    <p>Frontend Developer</p>\n    <MainNav />\n  </header>\n);\nexport default Header;\n","import React from \"react\";\n\nconst About = () => (\n  <section id=\"about\" className=\"about\">\n    <h2>About Me</h2>\n    <section className=\"mission\">\n      <h3>Professional mission</h3>\n      <p>\n        To combine my passion for user experience design and accessibility with\n        my development skills to make the web more beautiful, usable and\n        inclusive.\n      </p>\n    </section>\n    <section className=\"background\">\n      <h3>My background</h3>\n      <p>\n        I've always considered myself an artist and started college on a fine\n        arts/graphic design track. Along the way, I dabbled a bit in\n        photography, video, and animation (2D and 3D). I ended up focusing on\n        web design, and over the course of my career have shifted to frontend\n        development. I still geek out about typography, color theory, balance,\n        and other design principles - I just use code as my brush these days. I\n        am a quick study and learn new things all the time.\n      </p>\n    </section>\n    <section className=\"passions\">\n      <h3>\n        Things I <span class=\"large\">&hearts;</span>\n      </h3>\n      <ul className=\"things-I-love\">\n        <li>WordPress</li>\n        <li>JavaScript</li>\n        <li>CSS/Sass</li>\n        <li>Semantic HTML</li>\n        <li>Inclusivity</li>\n        <li>Yarn (I'm a knitter!)</li>\n        <li>Colors</li>\n        <li>Typography</li>\n        <li>Handmade art</li>\n        <li>Small/local businesses</li>\n        <li>Decaf tea &amp; coffee</li>\n        <li>Dark chocolate</li>\n        <li>Audio books</li>\n        <li>Feminism</li>\n        <li>Equity, social justice and equal rights</li>\n      </ul>\n    </section>\n    <aside>\n      <h3>Fun fact</h3>\n      <p>\n        I don't have a favorite color. I do have a favorite shade of each color\n        though!\n      </p>\n    </aside>\n  </section>\n);\nexport default About;\n","import React from \"react\";\nimport About from \"./About\";\n\nconst Content = () => (\n  <section className=\"app-content\">\n    <About />\n  </section>\n);\nexport default Content;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Content />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}