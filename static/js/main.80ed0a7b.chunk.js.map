{"version":3,"sources":["styles/modules/_colors.scss","images/tigger.jpg","files/JoeleenKennedyResume2019.pdf","App.scss","components/Contact.js","components/MainNav.js","components/Header.js","components/Colors.js","components/About.js","components/Work.js","components/Job.js","components/PrintButton.js","components/Resume.js","components/Content.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","className","title","href","MainNav","Header","isPrinting","FavoriteColors","Object","entries","Colors","map","color","hex","key","About","id","Work","src","tigger","alt","Job","companyName","fullDate","jobPositions","CompanyTitle","JobMeta","jobTitle","employmentDate","JobDescription","jobDescription","jobFullDetails","jobPosition","index","Fragment","PrintButton","setIsPrinting","onClick","Promise","resolve","reject","then","window","print","catch","console","error","Resume","jobsList","jobsData","JobsDataItem","resume","Content","role","Footer","Page","useState","useEffect","printMq","matchMedia","mqEvent","mqList","matches","addListener","removeListener","App","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80ed0a7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pink\":\"#ff1e65\",\"red\":\"#ad0a1a\",\"orange\":\"#ff850b\",\"yellow\":\"#ffc61e\",\"green\":\"#97ff7a\",\"teal\":\"#02c6f2\",\"blue\":\"#7096ff\",\"indigo\":\"#060351\",\"violet\":\"#45149b\",\"purple\":\"#c19eff\"};","module.exports = __webpack_public_path__ + \"static/media/tigger.8138e8ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JoeleenKennedyResume2019.26c8a3c6.pdf\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pink\":\"#ff1e65\",\"red\":\"#ad0a1a\",\"orange\":\"#ff850b\",\"yellow\":\"#ffc61e\",\"green\":\"#97ff7a\",\"teal\":\"#02c6f2\",\"blue\":\"#7096ff\",\"indigo\":\"#060351\",\"violet\":\"#45149b\",\"purple\":\"#c19eff\"};","import React from \"react\";\n\n/**\n * Contact component.\n *\n * @returns contact\n */\nconst Contact = () => (\n  <ul className=\"contact-me\">\n    <li className=\"print-only\">\n    <a\n      title=\"Map of Greensboro\"\n      href=\"https://goo.gl/maps/86h22PVTHJFBJF8S7\"\n    >\n      Greensboro, NC\n    </a>\n    </li>\n    <li className=\"print-only\">\n    <a title=\"Joeleen's website\" href=\"https://joeleen.net/\">\n      joeleen.net\n    </a>\n    </li>\n    <li>\n    <a title=\"Email Joeleen\" href=\"mailto:joeleenk@gmail.com\">\n      joeleenk@gmail.com\n    </a>\n    </li>\n    <li>\n    <a title=\"Call Joeleen\" href=\"tel:13864536905\">\n      386-453-6905\n    </a>\n    </li>\n  </ul>\n);\nexport default Contact;\n","import React from \"react\";\n\n/**\n * Main nav component.\n *\n * @returns main nav\n */\nconst MainNav = () => (\n  <nav className=\"app-main-nav\">\n    <ul>\n      <li>\n        <a href=\"#about\">About Me</a>\n      </li>\n      <li>\n        <a href=\"#work\">My Work</a>\n      </li>\n      <li>\n        <a href=\"#resume\">Resume</a>\n      </li>\n      <li>\n        <a href=\"#contact\">Contact</a>\n      </li>\n    </ul>\n  </nav>\n);\nexport default MainNav;\n","import React from \"react\";\nimport Contact from \"./Contact\";\nimport MainNav from \"./MainNav\";\n\n/**\n * Header component.\n *\n * @param {boolean} isPrinting Find out if we're printing.\n *\n * @returns header\n */\nconst Header = ({ isPrinting }) => (\n  <header className=\"app-header\">\n    <h1>Joeleen Kennedy</h1>\n    {isPrinting ? (\n      <Contact />\n    ) : (\n      <p>\n        a hybrid designer/front end developer who draws, paints, knits, and bakes\n        sourdough\n      </p>\n    )}\n    <MainNav />\n  </header>\n);\nexport default Header;\n","import React from \"react\";\nimport Colors from \"../styles/modules/_colors.scss\";\n\n/**\n * Favorite colors component.\n *\n * @returns favorite colors\n */\nconst FavoriteColors = () => (\n  <ul className=\"favorite-colors\">\n    {Object.entries(Colors).map(([color, hex]) => (\n      <li key={color} className={color}>\n        <h4 className=\"color-name\">{color}</h4>\n        <p className=\"color-hex\">{hex}</p>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default FavoriteColors;\n","import React from \"react\";\nimport FavoriteColors from \"./Colors\";\n\n/**\n * About component.\n *\n * @returns about\n */\nconst About = () => (\n  <section id=\"about\" className=\"about\">\n    <h2>About Me</h2>\n    <section className=\"mission\">\n      <h3>Professional mission</h3>\n      <p>\n        I combine my passion for user experience design and accessibility with\n        my development skills to make the web more beautiful, usable and\n        inclusive.\n      </p>\n    </section>\n    <section className=\"background\">\n      <h3>My background</h3>\n      <p>\n        I've always considered myself an artist and started college on a fine\n        arts/graphic design track. Along the way, I dabbled a bit in\n        photography, video, and animation (2D and 3D). I ended up focusing on\n        web design, and over the course of my career have shifted to frontend\n        development. I still geek out about typography, color theory, balance,\n        and other design principles - I just use code as my brush these days. I\n        am a quick study and learn new things all the time.\n      </p>\n    </section>\n    <section className=\"passions\">\n      <h3>\n        Things I <span className=\"large symbol\">&hearts;</span>\n      </h3>\n      <ul className=\"things-I-love\">\n        <li>WordPress</li>\n        <li>JavaScript</li>\n        <li>CSS/Sass</li>\n        <li>Semantic HTML</li>\n        <li>Inclusivity</li>\n        <li>Yarn (I'm a knitter!)</li>\n        <li>Colors</li>\n        <li>Typography</li>\n        <li>Handmade art</li>\n        <li>Small/local businesses</li>\n        <li>Tea</li>\n        <li>Decaf coffee</li>\n        <li>Dark chocolate</li>\n        <li>Audio books</li>\n        <li>Feminism</li>\n        <li>Equity, social justice and equal rights</li>\n      </ul>\n    </section>\n    <aside className=\"fun-fact\">\n      <h3>Fun fact</h3>\n      <p>\n        I don't have a favorite color. I do have a favorite shade of each color\n        though!\n      </p>\n      <FavoriteColors />\n    </aside>\n  </section>\n);\nexport default About;\n","import React from \"react\";\nimport tigger from \"../images/tigger.jpg\";\n\n/**\n * Work component.\n *\n * @returns work\n */\nconst Work = () => (\n  <section id=\"work\" className=\"work\">\n    <h2>My Work</h2>\n    <h3>Previous projects</h3>\n    <p>\n      I've been working on web sites for over a decade, so I've touched and\n      created many sites over the years. A few still exist, but most have been\n      replaced with newer versions. If you have a specific type of project in\n      mind, and you'd like to see my work,{\" \"}\n      <a title=\"Email Joeleen\" href=\"mailto:joeleenk@gmail.com\">\n        please reach out\n      </a>\n      , and I'll select some recent/relevant examples.\n    </p>\n    <h3>Code samples</h3>\n    <p>\n      <a href=\"https://github.com/joeleenk\">I'm on GitHub!</a> Currently most of\n      my work is hidden away in private repositories, but the source for this\n      site lives there. Hopefully soon I'll have more public repos. &#9786;\n    </p>\n    <p>In the meantime, here's a picture of my cat:<br />\n    <img src={tigger} className=\"tigger\" alt=\"An elderly gray and white tabby cat named Tigger sleeping in a circle.\" />\n    </p>\n  </section>\n);\nexport default Work;\n","import React from \"react\";\n\n/**\n * Job component. Displays individual job item.\n *\n * @param {boolean} isPrinting Find out if we're printing.\n * @param {string} companyName Name of the company.\n * @param {string} fullDate Full date of employment.\n * @param {array} jobPositions Array of different positions held at the company.\n *\n * @returns article\n */\nconst Job = ({ isPrinting, companyName, fullDate, jobPositions }) => {\n\n  // Get the company name and full date, if any.\n  const CompanyTitle = ({ companyName, fullDate }) => (\n    <h4>\n      {companyName}\n      {fullDate && <span className=\"job__date job__date--full\">{fullDate}</span>}\n    </h4>\n  );\n\n  // Get job title(s) and employment date(s).\n  const JobMeta = ({ jobTitle, employmentDate }) => (\n    <>\n      <h5>{jobTitle}</h5>\n      <p className=\"job__date\">{employmentDate}</p>\n    </>\n  );\n\n  // Get job description(s).\n  const JobDescription = ({ jobDescription }) => (\n    <p className=\"job__description\">{jobDescription}</p>\n  );\n\n  // Get the full job details. If we're isPrinting, group content in divs.\n  const jobFullDetails = jobPositions.map((jobPosition, index) =>\n    <React.Fragment key={index}>\n      {isPrinting ? (\n        <>\n          <div className=\"job--left\">\n            {index === 0 && (\n              <CompanyTitle companyName={companyName} fullDate={fullDate} />\n            )}\n            <JobMeta {...jobPosition} />\n          </div>\n          <div className=\"job--right\">\n            <JobDescription {...jobPosition} />\n          </div>\n        </>\n      ) : (\n        <>\n          {index === 0 && (\n            <CompanyTitle companyName={companyName} fullDate={fullDate} />\n          )}\n          <JobMeta {...jobPosition} />\n          <JobDescription {...jobPosition} />\n        </>\n      )}\n    </React.Fragment>\n  );\n\n  // Return the article.\n  return (\n    <article className=\"job\">\n      {jobFullDetails}\n    </article>\n  );\n};\nexport default Job;\n","import React from \"react\";\n\n/**\n * Print button component.\n *\n * @param {function} setIsPrinting Function to set isPrinting state.\n *\n * @returns print button\n */\nconst PrintButton = ({ setIsPrinting }) => {\n\n  // Click handler for print button.\n  const printHandler = () => {\n    // New promise to set the isPrinting state to true, then open the print dialog.\n    new Promise((resolve, reject) => {\n      setIsPrinting(true);\n      resolve();\n    }).then(() => {\n      window.print();\n    }).catch(() => {\n      console.error('Something went wrong with the print!');\n    });\n  }\n\n  // Return the print button.\n  return (\n    <button onClick={printHandler}>Print this section</button>\n  );\n}\nexport default PrintButton;\n","import React from \"react\";\nimport jobsData from \"../jobsData\";\nimport Job from \"./Job\";\nimport PrintButton from \"./PrintButton\";\nimport resume from \"../files/JoeleenKennedyResume2019.pdf\";\n\n/**\n * Resume component.\n *\n * @param {boolean} isPrinting Find out if we're printing.\n * @param {function} setIsPrinting Function to set isPrinting state.\n *\n * @returns resume\n */\nconst Resume = ({ isPrinting, setIsPrinting }) => {\n  // Map the jobs JSON data to a list of jobs.\n  const jobsList = jobsData.jobsData.map((JobsDataItem, index) =>\n    <Job key={index} {...JobsDataItem} isPrinting={isPrinting} />\n  );\n\n  // Return the resume section.\n  return (\n    <section id=\"resume\" className=\"resume\">\n      <h2>Resume</h2>\n      <ul className=\"print-resume\">\n        <li>\n          <PrintButton setIsPrinting={setIsPrinting} />\n        </li>\n        <li>\n          <a href={resume}>\n            <small>\n              Button not working? Download a pre-compiled PDF of my resume.\n            </small>\n          </a>\n        </li>\n      </ul>\n      <section className=\"skills\">\n        <h3>Skills</h3>\n        <p>\n          PHP, HTML, CSS, Sass, JavaScript, jQuery, React, Gulp, Grunt, Webpack,\n          accessibility, responsive design, wireframes, moodboards\n        </p>\n      </section>\n      <section className=\"experience\">\n        <h3>Experience</h3>\n        {jobsList}\n      </section>\n      <section className=\"education\">\n        <h3>Education</h3>\n        <h4>Daytona Beach Community College</h4>\n        <p>Associate of Science in Digital Media Technology, Summa Cum Laude</p>\n        <p>Associate of Science in Graphic Design Technology, with honors</p>\n      </section>\n      <section className=\"speaking\">\n        <h3>Speaking</h3>\n        <ul>\n          <li>\n            DC Web Women, Washington, DC, <em>Customizing WordPress</em>, 2013\n          </li>\n          <li>\n            DC Web Women, Washington, DC,{\" \"}\n            <em>jQuery Basics for Web Developers</em>, 2013\n          </li>\n          <li>\n            DC Web Women, Washington, DC, <em>What’s New with HTML5 and CSS3?</em>\n            , 2012\n          </li>\n        </ul>\n      </section>\n    </section>\n  );\n}\nexport default Resume;\n","import React from \"react\";\nimport About from \"./About\";\nimport Work from \"./Work\";\nimport Resume from \"./Resume\";\n\n/**\n * Content component.\n *\n * @param {boolean} isPrinting Find out if we're printing.\n * @param {function} setIsPrinting Function to set isPrinting state.\n *\n * @returns content\n */\nconst Content = ({ isPrinting, setIsPrinting }) => (\n  <main role=\"main\" className=\"app-content\">\n    <About />\n    <Work />\n    <Resume isPrinting={isPrinting} setIsPrinting={setIsPrinting} />\n  </main>\n);\nexport default Content;\n","import React from \"react\";\nimport Contact from \"./Contact\";\n\n/**\n * Footer component.\n *\n * @returns footer\n */\nconst Footer = () => (\n  <footer id=\"contact\" className=\"app-footer\">\n    <h2>Contact Me</h2>\n    <Contact />\n  </footer>\n);\nexport default Footer;\n","import React, { Component, useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\n\nimport \"./App.scss\";\n\n/**\n * Main page component.\n *\n * @returns page content\n */\nconst Page = () => {\n  // Set up a state to track whether we're printing.\n  const [isPrinting, setIsPrinting] = useState(false);\n\n  // Listen to see if we start printing and change the isPrinting state.\n  useEffect(() => {\n    const printMq = typeof window !== 'undefined' && window.matchMedia && window.matchMedia('print');\n    const mqEvent = mqList => setIsPrinting(!!mqList.matches);\n\n    printMq.addListener(mqEvent);\n    return () => printMq.removeListener(mqEvent);\n  }, []);\n\n  // Return the main page content.\n  return (\n    <>\n      <Header isPrinting={isPrinting} />\n      <Content isPrinting={isPrinting} setIsPrinting={setIsPrinting} />\n      <Footer />\n    </>\n  );\n}\n\n/**\n * Main app component.\n *\n * @returns page component.\n */\nclass App extends Component {\n  render() {\n    return (\n      <Page />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}